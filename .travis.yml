language: c++

branches:
  only:
    - master

dist: trusty

# Save common build configurations as shortcuts, so we can reference them later.
addons_shortcuts:
  addons_clang38: &clang38
    apt:
      sources: [ 'llvm-toolchain-trusty-3.8' ]
      packages: [ 'clang-3.8', 'libc++-dev' ]
  addons_clang39: &clang39
    apt:
      sources: [ 'llvm-toolchain-trusty-3.9' ]
      packages: [ 'clang-3.9', 'libc++-dev' ]
  addons_clang35: &clang40
    apt:
      sources: [ 'llvm-toolchain-trusty-4.0' ]
      packages: [ 'clang-4.0', 'libc++-dev' ]
  addons_gcc49: &gcc49
    apt:
      packages: [ 'g++-4.9', 'gcc-4.9' ]
  addons_gcc5: &gcc5
    apt:
      packages: [ 'g++-5', 'gcc-5' ]
  addons_gcc6: &gcc6
    apt:
      packages: [ 'g++-6', 'gcc-6', 'doxygen' ]


addons:
  apt:
    sources: &sources
      - ubuntu-toolchain-r-test

matrix:
  include:
    # - os: osx
    #   osx_image: xcode6
    #   compiler: clang
    # - os: osx
    #   osx_image: xcode7
    #   compiler: clang
    # - os: osx
    #   osx_image: xcode8
    #   compiler: clang
    - os: linux
      compiler: "clang-3.8"
      env: LLVM=3.8 CXXFLAGS=-stdlib=libc++
      addons: *clang38
    - os: linux
      compiler: "clang-3.9"
      env: LLVM=3.9 CXXFLAGS=-stdlib=libc++
      addons: *clang39
    - os: linux
      compiler: "clang-4.0"
      env: LLVM=4.0 CXXFLAGS=-stdlib=libc++
      addons: *clang40
    # - os: linux
    #   compiler: "gcc-4.7"
    #   env: CXX=g++-4.7
    #   addons: *gcc47
    # - os: linux
    #   compiler: "gcc-4.8"
    #   env: CXX=g++-4.8
    #   addons: *gcc48
    # - os: linux
    #   compiler: "gcc-4.9"
    #   env: CXX=g++-4.9 COVERAGE=gcov-4.9
    #   addons: *gcc49
    # - os: linux
    #   compiler: "gcc-4.9"
    #   env: CXX=g++-4.9 CXX_STD=c++14
    #   addons: *gcc49
    # - os: linux
    #   compiler: "gcc-5"
    #   env: CXX=g++-5 CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=0"
    #   addons: *gcc5
    # - os: linux
    #   compiler: "gcc-5"
    #   env: CXX=g++-5 CXXFLAGS="-D_GLIBCXX_USE_CXX11_ABI=1"
    #   addons: *gcc5
    # - os: linux
    #   compiler: "gcc-6"
    #   env: CXX=g++-6 BUILD_DOC=1
    #   addons: *gcc6

# matrix:
#   include:

#     # Xcode 7.3
#     - os: osx
#       env: BUILD_TYPE=Release SHARED=OFF
#       osx_image: xcode7.3

#     # Xcode 8
#     - os: osx
#       env: BUILD_TYPE=Release SHARED=OFF
#       osx_image: xcode8

#     # GCC 5
#     - os: linux
#       env: COMPILER=g++-5 BUILD_TYPE=Release SHARED=OFF CUDA=8.0.44-1
#       compiler: gcc

#     # GCC 6
#     - os: linux
#       env: COMPILER=g++-6 BUILD_TYPE=Release SHARED=OFF CUDA=8.0.44-1
#       compiler: gcc

#     # clang 3.8
#     - os: linux
#       env: LLVM_VERSION=3.8 BUILD_TYPE=Release SHARED=OFF CUDA=8.0.44-1
#       compiler: "clang-3.8"

#     # clang 3.9 (cuda not supported)
#     - os: linux
#       env: BUILD_TYPE=Release SHARED=OFF C_COMPILER=clang-3.9 CXX_COMPILER=clang++-3.9 CXXFLAGS=-stdlib=libc++
#       compiler: "clang-3.9"

#     # shared libs
#     - os: linux
#       env: LLVM_VERSION=default BUILD_TYPE=Release SHARED=ON CUDA=8.0.44-1
#       compiler: clang

#     # shared libs
#     - os: linux
#       env: LLVM_VERSION=default BUILD_TYPE=Release SHARED=ON CUDA=8.0.44-1
#       compiler: clang

#     # Shared libs
#     - os: osx
#       env: BUILD_TYPE=Release SHARED=ON
#       osx_image: xcode8

#     - os: linux
#       env: LLVM_VERSION=default BUILD_TYPE=Release SHARED=ON CUDA=8.0.44-1
#       compiler: clang

#     # Debug
#     - os: osx
#       env: BUILD_TYPE=Debug SHARED=OFF
#       osx_image: xcode8

#     - os: linux
#       env: LLVM_VERSION=default BUILD_TYPE=Debug SHARED=OFF CUDA=8.0.44-1
#       compiler: clang

install:
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
    fi

  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  # ############################################################################
  # # Setup default versions and override compiler if needed
  # ############################################################################
  # - if [[ "${LLVM}" == "default" ]]; then LLVM=3.8; fi

  # - if [[ "${LLVM}" != "" ]]; then export CC=clang-${LLVM}; export CXX=clang++-${LLVM}; fi
  - update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${LLVM} 100
  - update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${LLVM} 100
  - clang --version


  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.7/cmake-3.7.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    else
      brew upgrade cmake || brew install cmake
    fi
  - cmake --version


  ############################################################################
  # Install a CUDA
  ############################################################################
  # - |
  #   if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
  #     if [[ "${CUDA}" != "" ]]; then
  #       source ${TRAVIS_BUILD_DIR}/.travis/install-cuda-trusty.sh
  #     fi
  #   fi
  # - if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CUDA}" != "" ]]; then nvcc --version; fi;

before_script:
  - cd ${TRAVIS_BUILD_DIR}

script:
  ############################################################################
  # Build main simulation library and tests
  ############################################################################
  - mkdir build
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_SHARED_LIBS=$SHARED -DSTRICT_FLAGS=ON ..
  - cmake --build . -- -j12

  ############################################################################
  # Run CPU unit test only (GPU stuff won't work with travis)
  ############################################################################
  - ./testGameOfLife --gtest_filter=Cpu*

notifications:
  on_success: never
  on_failure: always